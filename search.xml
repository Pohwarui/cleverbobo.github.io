<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>深度理解逻辑回归</title>
    <url>/2020/08/27/log-regression/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>&emsp;&emsp;所谓机器学习，听起来很高深莫测，实际上并不复杂，简单来说就是数据驱动的算法。而数据驱动就是指在给定的数据情况下，我们需要找到一种合适的算法对这些数据进行操作，从而实现我们预期的目标，具体我们需要做的任务就是找到合适的模型来描述输入到输出之间的映射关系，然后在使用优化的方法不断对模型中的参数进行优化，使得最后得到的结果鲁棒性最高。在上述的描述中，主要涉及两个方面：1.合适的模型 2.合适的优化算法。其实，我们在初中就接触过相关的领域，比如给定一系列坐标点（x，y），利用线性回归公式（最小二乘法）拟合曲线y=ax+b。其中，y=ax+b就是我们选择的模型，而最小二乘法就是对其参数a，b的优化算法。当然，这只是最简单的应用，实际机器学习的算法往往要比这个复杂很多，但究其本质还是一样的。<br>&emsp;&emsp;对于机器学习而言，其功能非常强大，能完成分类、回归、转录、机器翻译、异常与检测、合成和采样等等。其中，分类与回归是机器学习的最基本的两项功能。上述举的例子就是回归算法。而今天，我主要介绍一种常用的分类算法——逻辑回归。对于分类的而言，逻辑回归是一种重要的学习方式，该方法所假设的函数在经过优化后的到模型适用性非常高。另外，之所以该方法在名称中带有回归二字，是因为其算法原理与线性回归之间有很深的联系，在下面介绍算法原理的时候我会重点讲解。</p>
<a id="more"></a>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>&emsp;&emsp;分类，顾名思义，就是将输入的数据分为不同的类别，其结果是离散的，比如预测明天的天气是去晴天还是非晴天。在计算机中，我们往往使用不同的数字代表不用的类别，比如1代表晴天，0代表非晴天。<br>&emsp;&emsp;但是，如果算法仅仅只能够告诉我们分类的结果是非常不精准的，我们更期望算法能够告诉我们发生某种情况的概率，比如明天晴天的概率为80%，非晴天的概率为20%，这样的话我们的可操作性就会更强，可以人为的添加参数（优化）对算法进行矫正。仍以晴天为例，如果分类算法较为精准，我们可以用50%为阈值，如果晴天的概率大于50%，就是晴天；如果算法计算晴天概率比实际偏大，那我们可以设置60%为阈值，大于60%为晴天</p>
<h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><p>&emsp;&emsp;在正式讲解逻辑回归的算法之间，首先我们需要了解一下线性回归的基本原理。我们假定输出y由输入x线性决定（这里的x,y都是向量)，其表达式为：</p>
<script type="math/tex; mode=display">f(x)=\theta^{T} x······（1）</script><p>当输入变量只有一个时，就变成了我们熟悉的y=ax+b，此时，利用最小二乘法，具体的效果大致如下：<br><img src="/2020/08/27/log-regression/1.png" alt="y=ax+b"><br>&emsp;&emsp;当多个变量的时候，就由一维向量到多维，例如二维就会得到一个平面，而非一条直线了，其共同的特点就是模型是连续的，其值域为（-∞，+∞），这是线性回归模型的一个重要的特征。</p>
<h2 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h2><p>&emsp;&emsp;逻辑回归是一种回归算法，该种算法主要应用于二分类的状况，例如明天北京是否会下雪，一个人五年内是否会得心脏病等等，由线性回归延伸出来的，那么具体是如何出现的呢？下面我来具体说明，仍以晴天为例：</p>
<ol>
<li>对于明天天气如何，我们该如何预测呢？首先，对于给定输入，比如温度，云层厚度，时间，风力，这些参数在算法中表现为x1,x2,x3……，我们最容易想到的就是令预测概率p（x）为x的线性函数，这样就和线性回归一致了，其值域为（-∞，+∞），并不符合我们的要求（概率应该在0~1之间），因此我们需要对其进行改进，使其符合我们的要求；</li>
<li>如果我们需要限制值域，在机器学习中最常用的就是ln函数，因此我们做一个简单的调整，令lnp(x)为x的线性函数，也就是说p（x）=exp(ax+b)，但是该函数无论正负，均只能在一个方向上约束值域，因此还需要改进；</li>
<li>最后，对lnp作简单的调整，令其在两个方向都被约束，我们用的方法是逻辑转换，令ln(p/1-p)为x的线性函数，那么p（x）的值域就是[0,1]<br>&emsp;&emsp;因此逻辑回归的表达式为（在印刷体中我们往往都采用log代表ln）：<script type="math/tex; mode=display">\log \frac{p(x)}{1-p(x)}=\beta_{0}+x \beta··········（2）</script></li>
</ol>
<p>如（2）中所示，p（x）为事情发生的概率，令$\log \frac{p(x)}{1-p(x)}$成为x的线性函数，解得p(x)为：</p>
<script type="math/tex; mode=display">\mathrm{p}\left(x ; \beta_{0}, \beta\right)=\frac{1}{1+e^{-\left(\beta_{0}+x \beta\right)}}··········（3）</script><p>（3）式相比于（2）式更容易理解条件概率p（x），但（2）式更能凸显逻辑回归与线性回归之间的关系。<br>如图所示：<br><img src="/2020/08/27/log-regression/2.png" alt="逻辑回归"><br>该图为函数逻辑回归曲线的大致形状，基本完成了我们期望的条件：曲线较为平滑，值域位于[0,1]。</p>
<h2 id="主要特征"><a href="#主要特征" class="headerlink" title="主要特征"></a>主要特征</h2><ol>
<li>一般取$\beta_{0}+x \quad \beta=0$为分类的边界，那么如果x是一维，那么分类边界就是一个点（类似在数轴上分类）；如果是二维分类边界就是一条直线，以此类推。之所以如此设置，是因为设置β0+ x β= 0为边界后，我们可以认为当算法输出的概率p（x）≥0.5时，分类结果 Y为1,；当p&lt;0.5时，分类结果Y为0。或者说算法输入的$\beta_{0}+x \quad \beta≥0$时，分类结果为1；$\beta_{0}+x \quad \beta&lt;0$时，分类结果为0（目前只考虑二分类的情况，多种分类情况在后面有介绍）。这样我们就可以把前面计算得到的概率转换为分类的结果了，既得到了分类的条件概率，又得到了分类的结果。</li>
<li>逻辑回归计算得到的条件概率是由数据点到边界之间的距离决定的，为$\frac{\beta_{0}+x \beta}{|\beta|}$。也就是说如果距离边界远，那么为1（或者0）的概率就会越大。另外这个公式也说明了当||β||越大时，在同一数据集下，分类得到的概率会更像极端（0,1）靠近，如下图所示<br><img src="/2020/08/27/log-regression/3.png" alt="逻辑回归"><br>（备注：最后一种是用线性分类的方式进行分类的）</li>
<li>逻辑回归是跟据线性回归演化而来，提出时间早，科学家们对其研究较为透彻，运用较为熟练。此外，该算法较为简单，且适用性较强，机器学习的算法在准确度够得情况下，尽量选择较为简单的算法，避免出现过拟合</li>
</ol>
<h2 id="对于多分类的逻辑回归"><a href="#对于多分类的逻辑回归" class="headerlink" title="对于多分类的逻辑回归"></a>对于多分类的逻辑回归</h2><p>逻辑回归本质上是对二分类的事件进行的分类，但是对于多分类的情况，我们可以通过建立多个分类模型，将多分类差分成多个二分类的情况，在利用逻辑回归进行分类，如图所示：<br><img src="/2020/08/27/log-regression/4.png" alt="逻辑回归"><br>一般而言如果存在n中情况，我们会设置n个分类器，每个分类器对其中一种进行识别，其条件概率的计算公式为：</p>
<script type="math/tex; mode=display">P(Y=c \mid X=x)=\frac{e^{\beta_{0}^{(c)}+x \beta^{(c)}}}{\sum_{i=1}^{n} e^{\beta_{0}^{(j)}+x \beta^{(i)}}}</script><p>判别方法与之前类似，如果超过0.5就认为是第c类。值得一提是，当只有两种情况时，令$\beta^{0}=\beta_{0}^{(1)}-\beta_{0}^{(0)}$以及$\beta=\beta^{(1)}-\beta^{(0)}$时，多情况的逻辑分类就转换成二分类的情况了。<br><br>下面是我自己的推导过程：<br><img src="/2020/08/27/log-regression/5.png" alt="逻辑回归"></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>入门</tag>
        <tag>课程</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown基本语法一</title>
    <url>/2020/08/26/markdown1/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本篇blog主要面向初步接触markdown的小白，主要是面向windows用户，简单介绍markdown语法规则，同时方便自己在忘记时能快速查看~<br>本文参考文献：<br><a href="https://hyxxsfwy.github.io/2016/01/15/Hexo-Markdown-%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C">一、简明语法手册</a><br><a href="https://www.mereith.com/2018/12/08/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/">二、某知名哲学家的blog</a><br><a href="https://www.jianshu.com/p/191d1e21f7ed/">三、Markdown基本语法</a><br><a href="https://www.jianshu.com/p/599857933f6e">四、Markdown基本语法总结</a></p>
<h2 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h2><p>第一种：打开powershell（管理员），打开到对应位置的目录，输入以下代码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;新文章的名字&quot;</span></span><br></pre></td></tr></table></figure><br>第二种：打开blog文章所在的位置，例如<code>D:\Program Files\hexo-blog\myblog\source\_posts</code>,创建txt文件，更改拓展名为.md</p>
<p>两种方法没有什么本质区别，效率也是一样的，大家可以根据自己的习惯选择,个人推荐选择第一种~</p>
<h2 id="创建blog文件的文件头部分"><a href="#创建blog文件的文件头部分" class="headerlink" title="创建blog文件的文件头部分"></a>创建blog文件的文件头部分</h2><p>每一篇blog一般都要包含4个部分，以本篇为例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: markdown基本语法一</span><br><span class="line">date: 2020-08-26 23:00:00</span><br><span class="line">tags: [markdown,入门] </span><br><span class="line">categories: markdown</span><br><span class="line">description: 本篇blog主要面向初步接触markdown的小白，主要是面向windows用户，简单介绍markdown语法规则，同时方便自己在忘记时能快速查看~</span><br></pre></td></tr></table></figure><br>分别对应本篇文章的标题，编辑时间，标签以及文章分类。另外，标签可以有多个，用英文逗号隔开；分类建议只有一个；简介只在首页列表显示，打开后不会显示，是可选项。<br><a id="more"></a></p>
<h2 id="编写文章的标题"><a href="#编写文章的标题" class="headerlink" title="编写文章的标题"></a>编写文章的标题</h2><p>markdown支持6级标题，以<code>#</code>作为关键字，识别标题，实例如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一级标题</span></span><br><span class="line"><span class="comment">## 二级标题</span></span><br><span class="line"><span class="comment">### 三级标题</span></span><br><span class="line"><span class="comment">#### 四级标题</span></span><br><span class="line"><span class="comment">##### 五级标题</span></span><br><span class="line"><span class="comment">###### 六级标题</span></span><br></pre></td></tr></table></figure><br>效果如下：<br><img src="https://pic.mereith.com/img/show_title.png-slim" alt></p>
<p>此外还有一些特殊的标题符号，例如在标题前加入<code>-</code>, <code>*</code>,<code>+</code>，可着重标记该项，效果如下：</p>
<ul>
<li>着重强调符号</li>
</ul>
<h2 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h2><h3 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h3><p>使用<code>*</code>和<code>**</code>分别表示斜体和粗体，格式如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*斜体*，**粗体**，***斜体加粗***</span><br></pre></td></tr></table></figure><br>效果展示：<em>斜体</em>,<strong>粗体</strong>,<strong><em>斜体加粗</em></strong></p>
<h2 id="字体、字号、颜色"><a href="#字体、字号、颜色" class="headerlink" title="字体、字号、颜色"></a>字体、字号、颜色</h2><p>使用关键字，可以指定字体的颜色和大小，其格式为：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">指定字体类型： &lt;font face=<span class="string">&quot;黑体&quot;</span>&gt;我是黑体字&lt;/font&gt;</span><br><span class="line">指定字体大小： &lt;font size=12&gt;我是12号字&lt;/font&gt;</span><br><span class="line">指定字体颜色：&lt;font color=<span class="comment">#0099ff&gt;我是蓝色字&lt;/font&gt; #0099ff 为颜色的16进制代码</span></span><br><span class="line">指定字体颜色、字号、字体类型&lt;font color=<span class="comment">#0099ff size=12 face=&quot;黑体&quot;&gt;黑体&lt;/font&gt;</span></span><br></pre></td></tr></table></figure><br>效果如下：<br>指定字体类型： <font face="黑体">我是黑体字</font><br>指定字体大小： <font size="12">我是12号字</font><br>指定字体颜色：<font color="#0099ff">我是蓝色字</font> #0099ff 为颜色的16进制代码<br>指定字体颜色、字号、字体类型<font color="#0099ff" size="12" face="黑体">黑体</font></p>
<h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>方法1：连敲2个以上空格+enter键；<br>方法2：利用html语法，<code>&lt;br&gt;</code>。</p>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>单独一行使用<code>***</code>或者<code>---</code>，表示该行作为分割线</p>
<hr>
<h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>删除线是指在原文本上画一条线，类似在纸上写错了划线来删除，一般用于表示过时的版本或者错误的写法较为醒目，格式如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><br>效果：<del>删除线</del></p>
<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>在编写blog的时候，往往会参考一些网站，我们需要把网站链接放在正文中，此时就需要用到超链接；此外还可以放一些图片链接<br>网站链接格式如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[链接说明](链接地址)</span><br></pre></td></tr></table></figure><br>例如：<a href="https://www.mereith.com/">某知名哲学家♂的个人主页</a></p>
<p>图片超链接格式如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![图片说明](图片地址)</span><br></pre></td></tr></table></figure><br>例如：<img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=543966357,2530364137&amp;fm=26&amp;gp=0.jpg" alt="某知名老婆的图片" title="蕾姆"></p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>可以用<code>\</code>来表示注释，也就是说<code>\</code>后的文字不会被转义，格式如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">\<span class="comment">#标题格式，但不是标题</span></span><br></pre></td></tr></table></figure><br>具体效果如下：#标题格式，但不是标题</p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>使用<code>&gt;</code>来表示文字的引用，往往在引用参考文献中的语句时使用，其格式如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; Sow nothing, reap nothing</span><br></pre></td></tr></table></figure><br>此外，引用还可以嵌套使用，例如:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; 这是第一个引用</span><br><span class="line">&gt;&gt; 这是第一个引用中的引用</span><br><span class="line">&gt;&gt;&gt; 这是第一个引用中的引用的引用</span><br></pre></td></tr></table></figure><br>效果展示如下：</p>
<blockquote>
<p>这是第一个引用</p>
<blockquote>
<p>这是第一个引用中的引用</p>
<blockquote>
<p>这是第一个引用中的引用的引用<br>我就不套娃了，大家自己可以试试~</p>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p><strong>首先</strong>，是行内代码块，使用一对 <code>来括住文字，格式如下：
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">行内`代码`块</span><br></pre></td></tr></table></figure>
其效果如下：行内</code>代码`块</p>
</blockquote>
</blockquote>
</blockquote>
<p><strong>其次</strong>，多行代码块，使用一对```来括住文字，效果如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一行</span><br><span class="line">第二行</span><br><span class="line">第三行</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p>
<p><strong>最后</strong>，支持规定语言的代码展示，以python为例，在 ``` 后加入编码格式即可<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    print(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="引用本地图片"><a href="#引用本地图片" class="headerlink" title="引用本地图片"></a>引用本地图片</h2><p>在hexo中，如果你想引用本地图片，最好先安装hexo-asset-image的插件，保证图片不会因为移动而丢失。安装完该插件之后，每次产生新的.md文件的同时，还会在生成与之同名的文件夹。将想要上传的图片传入该文件夹，按照<code>![你想输入的替代文字](xxxx/图片名.jpg)</code>引用即可，效果如下：<br><img src="/2020/08/26/markdown1/test1.jpg" alt="测试图片"></p>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown进阶心得（更新中）</title>
    <url>/2020/08/27/markdown2/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本篇blog主要是在编辑markdown时，遇到了很多问题，同时也找到了很多技巧，所以在这里mark一下</p>
<h2 id="首行缩进"><a href="#首行缩进" class="headerlink" title="首行缩进"></a>首行缩进</h2><p>英文字符空格 <code>&amp;ensp</code><br>中文字符空格 <code>&amp;emsp</code><br>不断行的空白格 <code>&amp;nbsp</code><br>其中较为常用的是<code>&amp;emsp</code>,其效果如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;emsp&amp;emsp首行缩进两字符</span><br></pre></td></tr></table></figure><br><a id="more"></a></p>
<h2 id="文字居中"><a href="#文字居中" class="headerlink" title="文字居中"></a>文字居中</h2><p>文字居中使用<code>&lt;center&gt; ``&lt;/center&gt;</code>来括住文字，格式如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;center&gt; 文字居中&lt;&#x2F;center&gt; </span><br></pre></td></tr></table></figure><br>效果展示：</p>
<center> 文字居中</center> 

<h2 id="插入公式"><a href="#插入公式" class="headerlink" title="插入公式"></a>插入公式</h2><p>参考链接：(<a href="https://www.jianshu.com/p/7ab21c7f0674">https://www.jianshu.com/p/7ab21c7f0674</a>)<br>按照参考链接里面的教程，将冲突的配置文件更改，即可在exo中渲染MathJax数学公式<br><br>但是该公式有严格的LaTeX语法，语法规则参考<a href="https://www.jianshu.com/p/25f0139637b7">《markdown中公式编辑教程》</a>,所以较为复杂，在这里推荐一种懒人方法：使用“mathpix”插件，官方的下载地址为(<a href="https://mathpix.com/)。">https://mathpix.com/)。</a><br>使用方法浅显易懂，注册账号登录，截屏选取公式，复制结果。如果是编辑公式，我们可以在word上编写或者写在纸上，用该软件转换格式，实测非常好用~</p>
<h2 id="writage插件"><a href="#writage插件" class="headerlink" title="writage插件"></a>writage插件</h2><p>官方地址：(<a href="https://www.writage.com">https://www.writage.com</a>)<br>使用教程：(<a href="https://www.cnblogs.com/craigtaylor/p/13540170.html">https://www.cnblogs.com/craigtaylor/p/13540170.html</a>)<br>该插件可以将word文件转换为.md文件，但是经过我的实测，并不是很理想，待开发中~</p>
<center> <font size="12" color="#DC143C" face="黑体">未完待续~</font> </center>

]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>进阶</tag>
      </tags>
  </entry>
</search>
